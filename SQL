CREATE TABLE AccessManagement (
    id INT PRIMARY KEY IDENTITY(1,1), -- Primary key with auto-increment
    first_name NVARCHAR(100) NOT NULL,
    last_name NVARCHAR(100) NOT NULL,
    location_type NVARCHAR(100) NOT NULL,
    location_text NVARCHAR(100) NOT NULL,
    department NVARCHAR(100) NOT NULL,
    designation NVARCHAR(100) NOT NULL,
    date_of_joining DATE NOT NULL,
    validity_period INT NOT NULL,
    mobile_no NVARCHAR(15) NOT NULL,
    reporting_manager NVARCHAR(255) NOT NULL,
    vendor_name NVARCHAR(100) NOT NULL,
    nationality NVARCHAR(100) NOT NULL,
    category NVARCHAR(100) NOT NULL,
    piflow_input_flow NVARCHAR(3) CHECK (piflow_input_flow IN ('yes', 'no')), -- Restrict values to 'yes' or 'no'
    proof_upload VARBINARY(MAX) -- For file upload; stores binary data
);

from django.shortcuts import render, redirect
from .forms import AccessManagementForm
from .models import AccessManagement

def access_management_view(request):
    if request.method == 'POST':
        form = AccessManagementForm(request.POST, request.FILES)
        if form.is_valid():
            # Save form data to the database
            AccessManagement.objects.create(
                first_name=form.cleaned_data['first_name'],
                last_name=form.cleaned_data['last_name'],
                location_type=form.cleaned_data['location_type'],
                location_text=form.cleaned_data['location_text'],
                department=form.cleaned_data['department'],
                designation=form.cleaned_data['designation'],
                date_of_joining=form.cleaned_data['date_of_joining'],
                validity_period=form.cleaned_data['validity_period'],
                mobile_no=form.cleaned_data['mobile_no'],
                reporting_manager=form.cleaned_data['reporting_manager'],
                vendor_name=form.cleaned_data['vendor_name'],
                nationality=form.cleaned_data['nationality'],
                category=form.cleaned_data['category'],
                piflow_input_flow=form.cleaned_data['piflow_input_flow'],
                proof_upload=form.cleaned_data['proof_upload']
            )
            return redirect('success')
    else:
        form = AccessManagementForm()

    return render(request, 'form_page.html', {'form': form})


# forms.py
from django import forms
from .models import AccessManagement

class AccessManagementForm(forms.ModelForm):
    class Meta:
        model = AccessManagement
        fields = [
            'first_name', 'last_name', 'location_type', 'location_text', 
            'department', 'designation', 'date_of_joining', 'validity_period', 
            'mobile_no', 'reporting_manager', 'vendor_name', 'nationality', 
            'piflow_input_flow', 'proof_upload'
        ]
        widgets = {
            'date_of_joining': forms.SelectDateWidget(),
            'proof_upload': forms.FileInput(),
        }
