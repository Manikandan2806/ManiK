CREATE TABLE AccessManagement (
    id INT PRIMARY KEY IDENTITY(1,1), -- Primary key with auto-increment
    first_name NVARCHAR(100) NOT NULL,
    last_name NVARCHAR(100) NOT NULL,
    location_type NVARCHAR(100) NOT NULL,
    location_text NVARCHAR(100) NOT NULL,
    department NVARCHAR(100) NOT NULL,
    designation NVARCHAR(100) NOT NULL,
    date_of_joining DATE NOT NULL,
    validity_period INT NOT NULL,
    mobile_no NVARCHAR(15) NOT NULL,
    reporting_manager NVARCHAR(255) NOT NULL,
    vendor_name NVARCHAR(100) NOT NULL,
    nationality NVARCHAR(100) NOT NULL,
    category NVARCHAR(100) NOT NULL,
    piflow_input_flow NVARCHAR(3) CHECK (piflow_input_flow IN ('yes', 'no')), -- Restrict values to 'yes' or 'no'
    proof_upload VARBINARY(MAX) -- For file upload; stores binary data
);


from django import forms
from .models import AccessManagement

class AccessManagementForm(forms.ModelForm):
    location_type_choices = [
        ('associate resort', 'Associate Resort'),
        ('branch', 'Branch'),
        ('corporate', 'Corporate'),
        ('dsa', 'DSA'),
        ('resort', 'Resort')
    ]
    location_text_choices = {
        'associate resort': [('associate resort', 'Associate Resort')],
        'branch': [
            ('ahmedabad', 'Ahmedabad'),
            ('bangalore - cunnigham road', 'Bangalore - Cunnigham Road'),
            ('bangalore - koramangala', 'Bangalore - Koramangala'),
            ('bhopal', 'Bhopal'),
            ('chandigarh', 'Chandigarh')
        ],
        'corporate': [
            ('chennai', 'Chennai'),
            ('cor-mumbai', 'Cor-Mumbai'),
            ('corporate', 'Corporate')
        ],
        'dsa': [
            ('ahmedabad', 'Ahmedabad'),
            ('bangalore - cunnigham road', 'Bangalore - Cunnigham Road'),
            ('bangalore - koramangala', 'Bangalore - Koramangala'),
            ('bhopal', 'Bhopal'),
            ('chandigarh', 'Chandigarh')
        ],
        'resort': [
            ('acacia', 'Acacia'),
            ('alibaug', 'Alibaug'),
            ('alleppy', 'Alleppy'),
            ('arrokutty', 'Arrokutty')
        ]
    }

    location_type = forms.ChoiceField(choices=location_type_choices, label="Location Type")
    location_text = forms.ChoiceField(choices=[], label="Location Text")  # Dynamically populated based on location_type

    class Meta:
        model = AccessManagement
        fields = '__all__'  # Or specify fields explicitly if needed

    def __init__(self, *args, **kwargs):
        # Handle 'initial' argument if it's passed, as well as other arguments
        initial = kwargs.pop('initial', {})
        super().__init__(*args, **kwargs)
        
        # Retrieve the initial value of location_type if provided
        location_type = initial.get('location_type', self.initial.get('location_type'))
        
        # Populate the location_text choices based on the initial location_type
        if location_type and location_type in self.location_text_choices:
            self.fields['location_text'].choices = self.location_text_choices[location_type]
        else:
            self.fields['location_text'].choices = []

        # Update location_text choices on form data if the form is re-rendered (e.g., after a POST)
        if 'location_type' in self.data:
            selected_location_type = self.data.get('location_type')
            self.fields['location_text'].choices = self.location_text_choices.get(selected_location_type, [])
    
